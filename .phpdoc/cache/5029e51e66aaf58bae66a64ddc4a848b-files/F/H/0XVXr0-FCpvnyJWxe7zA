1760166195
5029e51e66aaf58bae66a64ddc4a848b-phpdoc%3A2090912f3be4e455a23bd8a5f264c541-90d9eaff7f0138da05d0a3c93d1712b7
s:50256:"O:33:"phpDocumentor\Reflection\Php\File":14:{s:39:" phpDocumentor\Reflection\Php\File name";s:25:"StarmusCustomPostType.php";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:0:{}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}s:40:" phpDocumentor\Reflection\Php\File enums";a:0:{}s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"90d9eaff7f0138da05d0a3c93d1712b7";s:39:" phpDocumentor\Reflection\Php\File path";s:38:"src/includes/StarmusCustomPostType.php";s:41:" phpDocumentor\Reflection\Php\File source";s:34805:"<?php
/**
 * Registers Custom Post Types, Taxonomies, and ACF fields.
 *
 * @package Starmus\includes
 * @version 0.4.0
 * @since 0.2.0
 */

// Exit if accessed directly.
if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

add_action(
	'acf/include_fields',
	function () {
		if ( ! function_exists( 'acf_add_local_field_group' ) ) {
			return;
		}

		acf_add_local_field_group(
			array(
				'key'                   => 'group_689a647f54a3a',
				'title'                 => 'Agreement to Terms',
				'fields'                => array(
					array(
						'key'                         => 'field_68aa07e16725b',
						'label'                       => 'Terms Type',
						'name'                        => 'terms_type',
						'aria-label'                  => '',
						'type'                        => 'select',
						'instructions'                => '',
						'required'                    => 1,
						'conditional_logic'           => 0,
						'wrapper'                     => array(
							'width' => '',
							'class' => '',
							'id'    => '',
						),
						'only_front'                  => 0,
						'frontend_admin_display_mode' => 'edit',
						'choices'                     => array(
							'Full Terms'          => 'Initial Full Terms Agreement',
							'Recorded Submission' => 'Recorded Submission Terms',
						),
						'default_value'               => false,
						'return_format'               => 'value',
						'multiple'                    => 0,
						'allow_null'                  => 0,
						'allow_in_bindings'           => 0,
						'ui'                          => 0,
						'ajax'                        => 0,
						'placeholder'                 => '',
						'create_options'              => 0,
						'save_options'                => 0,
					),
					array(
						'key'                         => 'field_689a64f8ab306',
						'label'                       => 'Agreed to Contributor Terms',
						'name'                        => 'agreed_to_contributor_terms',
						'aria-label'                  => '',
						'type'                        => 'true_false',
						'instructions'                => '',
						'required'                    => 0,
						'conditional_logic'           => 0,
						'wrapper'                     => array(
							'width' => '',
							'class' => '',
							'id'    => '',
						),
						'only_front'                  => 0,
						'frontend_admin_display_mode' => 'edit',
						'message'                     => '',
						'default_value'               => 0,
						'allow_in_bindings'           => 0,
						'ui'                          => 0,
						'ui_on_text'                  => '',
						'ui_off_text'                 => '',
					),
					array(
						'key'                         => 'field_689a6646ab30c',
						'label'                       => 'Contributor ID',
						'name'                        => 'contributor_id',
						'aria-label'                  => '',
						'type'                        => 'text',
						'instructions'                => '',
						'required'                    => 0,
						'conditional_logic'           => 0,
						'wrapper'                     => array(
							'width' => '',
							'class' => '',
							'id'    => '',
						),
						'only_front'                  => 0,
						'frontend_admin_display_mode' => 'edit',
						'default_value'               => '',
						'maxlength'                   => '',
						'allow_in_bindings'           => 0,
						'placeholder'                 => '',
						'prepend'                     => '',
						'append'                      => '',
					),
					array(
						'key'                         => 'field_689a6480ab303',
						'label'                       => 'Contributor Name',
						'name'                        => 'contributor_name',
						'aria-label'                  => '',
						'type'                        => 'text',
						'instructions'                => '',
						'required'                    => 0,
						'conditional_logic'           => 0,
						'wrapper'                     => array(
							'width' => '',
							'class' => '',
							'id'    => '',
						),
						'only_front'                  => 0,
						'frontend_admin_display_mode' => 'edit',
						'default_value'               => '',
						'maxlength'                   => '',
						'allow_in_bindings'           => 0,
						'placeholder'                 => '',
						'prepend'                     => '',
						'append'                      => '',
					),
					array(
						'key'                         => 'field_689a649fab304',
						'label'                       => 'Contributor Signature',
						'name'                        => 'contributor_signature',
						'aria-label'                  => '',
						'type'                        => 'file',
						'instructions'                => '',
						'required'                    => 0,
						'conditional_logic'           => 0,
						'wrapper'                     => array(
							'width' => '',
							'class' => '',
							'id'    => '',
						),
						'only_front'                  => 0,
						'frontend_admin_display_mode' => 'edit',
						'return_format'               => 'array',
						'library'                     => 'all',
						'no_file_text'                => '',
						'button_text'                 => '',
						'custom_directory'            => 1,
						'custom_directory_name'       => 'Contributor_Signatures',
						'hide_from_library'           => 1,
						'min_size'                    => '',
						'max_size'                    => '',
						'mime_types'                  => '',
						'allow_in_bindings'           => 0,
					),
					array(
						'key'                         => 'field_689a64dfab305',
						'label'                       => 'Agreement Datetime',
						'name'                        => 'agreement_datetime',
						'aria-label'                  => '',
						'type'                        => 'datetime_input',
						'instructions'                => '',
						'required'                    => 0,
						'conditional_logic'           => 0,
						'wrapper'                     => array(
							'width' => '',
							'class' => '',
							'id'    => '',
						),
						'only_front'                  => 0,
						'frontend_admin_display_mode' => 'edit',
						'default_value'               => '',
					),
					array(
						'key'                         => 'field_689a6588ab30a',
						'label'                       => 'URL',
						'name'                        => 'url',
						'aria-label'                  => '',
						'type'                        => 'page_link',
						'instructions'                => '',
						'required'                    => 0,
						'conditional_logic'           => 0,
						'wrapper'                     => array(
							'width' => '',
							'class' => '',
							'id'    => '',
						),
						'only_front'                  => 0,
						'frontend_admin_display_mode' => 'edit',
						'post_type'                   => '',
						'post_status'                 => '',
						'taxonomy'                    => '',
						'allow_archives'              => 1,
						'multiple'                    => 0,
						'allow_null'                  => 0,
						'allow_in_bindings'           => 0,
					),
					array(
						'key'                         => 'field_689a6524ab307',
						'label'                       => 'Contributor IP',
						'name'                        => 'contributor_ip',
						'aria-label'                  => '',
						'type'                        => 'text',
						'instructions'                => '',
						'required'                    => 0,
						'conditional_logic'           => 0,
						'wrapper'                     => array(
							'width' => '',
							'class' => '',
							'id'    => '',
						),
						'only_front'                  => 0,
						'frontend_admin_display_mode' => 'edit',
						'default_value'               => '',
						'maxlength'                   => '',
						'allow_in_bindings'           => 0,
						'placeholder'                 => '',
						'prepend'                     => '',
						'append'                      => '',
					),
					array(
						'key'                         => 'field_689a6563ab308',
						'label'                       => 'Submission ID',
						'name'                        => 'submission_id',
						'aria-label'                  => '',
						'type'                        => 'text',
						'instructions'                => '',
						'required'                    => 0,
						'conditional_logic'           => 0,
						'wrapper'                     => array(
							'width' => '',
							'class' => '',
							'id'    => '',
						),
						'only_front'                  => 0,
						'frontend_admin_display_mode' => 'edit',
						'default_value'               => '',
						'maxlength'                   => '',
						'allow_in_bindings'           => 0,
						'placeholder'                 => '',
						'prepend'                     => '',
						'append'                      => '',
					),
					array(
						'key'                         => 'field_689a6572ab309',
						'label'                       => 'Contributor User Agent',
						'name'                        => 'contributor_user_agent',
						'aria-label'                  => '',
						'type'                        => 'text',
						'instructions'                => '',
						'required'                    => 0,
						'conditional_logic'           => 0,
						'wrapper'                     => array(
							'width' => '',
							'class' => '',
							'id'    => '',
						),
						'only_front'                  => 0,
						'frontend_admin_display_mode' => 'edit',
						'default_value'               => '',
						'maxlength'                   => '',
						'allow_in_bindings'           => 0,
						'placeholder'                 => '',
						'prepend'                     => '',
						'append'                      => '',
					),
					array(
						'key'                         => 'field_689a65a6ab30b',
						'label'                       => 'Contributor Geolocation',
						'name'                        => 'contributor_geolocation',
						'aria-label'                  => '',
						'type'                        => 'google_map',
						'instructions'                => '',
						'required'                    => 0,
						'conditional_logic'           => 0,
						'wrapper'                     => array(
							'width' => '',
							'class' => '',
							'id'    => '',
						),
						'only_front'                  => 0,
						'frontend_admin_display_mode' => 'edit',
						'center_lat'                  => '',
						'center_lng'                  => '',
						'zoom'                        => '',
						'height'                      => '',
						'allow_in_bindings'           => 1,
					),
				),
				'location'              => array(
					array(
						array(
							'param'    => 'post_type',
							'operator' => '==',
							'value'    => 'consent-agreement',
						),
					),
				),
				'menu_order'            => 0,
				'position'              => 'acf_after_title',
				'style'                 => 'default',
				'label_placement'       => 'top',
				'instruction_placement' => 'label',
				'hide_on_screen'        => '',
				'active'                => true,
				'description'           => 'Fields for agreement to contributor terms',
				'show_in_rest'          => 1,
				'no_values_message'     => '',
			)
		);

		acf_add_local_field_group(
			array(
				'key'                   => 'group_682cba4f12a3b',
				'title'                 => 'Recording Session Metadata',
				'fields'                => array(
					array(
						'key'               => 'field_682cba6d12a3c',
						'label'             => 'Project / Collection ID',
						'name'              => 'project_collection_id',
						'aria-label'        => '',
						'type'              => 'text',
						'instructions'      => 'Identifier for the project or collection this session belongs to. Helps group related sessions.',
						'required'          => 0,
						'conditional_logic' => 0,
						'wrapper'           => array(
							'width' => '50',
							'class' => '',
							'id'    => '',
						),
						'default_value'     => '',
						'maxlength'         => '',
						'placeholder'       => 'e.g., Watts Riots Oral History Project',
						'prepend'           => '',
						'append'            => '',
					),
					array(
						'key'               => 'field_682cbad312a3d',
						'label'             => 'Accession Number',
						'name'              => 'accession_number',
						'aria-label'        => '',
						'type'              => 'text',
						'instructions'      => 'Unique accession or catalog number for this specific recording session.',
						'required'          => 0,
						'conditional_logic' => 0,
						'wrapper'           => array(
							'width' => '50',
							'class' => '',
							'id'    => '',
						),
						'default_value'     => '',
						'maxlength'         => '',
						'placeholder'       => 'e.g., 2025.06.25-A',
						'prepend'           => '',
						'append'            => '',
					),
					array(
						'key'                         => 'field_682cbb1a12a3e',
						'label'                       => 'Session Date',
						'name'                        => 'session_date',
						'aria-label'                  => '',
						'type'                        => 'date_picker',
						'instructions'                => 'The date the recording session took place.',
						'required'                    => 0,
						'conditional_logic'           => 0,
						'wrapper'                     => array(
							'width' => '33.33',
							'class' => '',
							'id'    => '',
						),
						'only_front'                  => 0,
						'frontend_admin_display_mode' => 'edit',
						'display_format'              => 'F j, Y',
						'return_format'               => 'Y-m-d',
						'first_day'                   => 1,
						'allow_in_bindings'           => 1,
						'default_to_current_date'     => 0,
					),
					array(
						'key'               => 'field_682cbb6d12a3f',
						'label'             => 'Session Start Time',
						'name'              => 'session_start_time',
						'aria-label'        => '',
						'type'              => 'time_picker',
						'instructions'      => '',
						'required'          => 0,
						'conditional_logic' => 0,
						'wrapper'           => array(
							'width' => '33.33',
							'class' => '',
							'id'    => '',
						),
						'display_format'    => 'g:i a',
						'return_format'     => 'H:i:s',
					),
					array(
						'key'               => 'field_682cbba712a40',
						'label'             => 'Session End Time',
						'name'              => 'session_end_time',
						'aria-label'        => '',
						'type'              => 'time_picker',
						'instructions'      => '',
						'required'          => 0,
						'conditional_logic' => 0,
						'wrapper'           => array(
							'width' => '33.33',
							'class' => '',
							'id'    => '',
						),
						'display_format'    => 'g:i a',
						'return_format'     => 'H:i:s',
					),
					array(
						'key'                         => 'field_682cbc0a12a41',
						'label'                       => 'Location',
						'name'                        => 'location',
						'aria-label'                  => '',
						'type'                        => 'text',
						'instructions'                => 'Physical place where the recording session occurred (e.g., building, room, address).',
						'required'                    => 0,
						'conditional_logic'           => 0,
						'wrapper'                     => array(
							'width' => '50',
							'class' => '',
							'id'    => '',
						),
						'only_front'                  => 0,
						'frontend_admin_display_mode' => 'edit',
						'default_value'               => '',
						'maxlength'                   => 150,
						'allow_in_bindings'           => 1,
						'placeholder'                 => 'e.g., 123 Main St, Anytown, USA',
						'prepend'                     => '',
						'append'                      => '',
					),
					array(
						'key'               => 'field_682cbc5312a42',
						'label'             => 'GPS Coordinates',
						'name'              => 'gps_coordinates',
						'aria-label'        => '',
						'type'              => 'google_map',
						'instructions'      => 'If available, the geographic coordinates of the recording location.',
						'required'          => 0,
						'conditional_logic' => 0,
						'wrapper'           => array(
							'width' => '50',
							'class' => '',
							'id'    => '',
						),
						'center_lat'        => '',
						'center_lng'        => '',
						'zoom'              => '',
						'height'            => '',
					),
					array(
						'key'                         => 'field_682cbd3812a43',
						'label'                       => 'Contributor ID',
						'name'                        => 'contributor_id',
						'aria-label'                  => '',
						'type'                        => 'relationship',
						'instructions'                => 'Link to all persons who contributed oral content during this session.',
						'required'                    => 0,
						'conditional_logic'           => 0,
						'wrapper'                     => array(
							'width' => '50',
							'class' => '',
							'id'    => '',
						),
						'only_front'                  => 0,
						'frontend_admin_display_mode' => 'edit',
						'post_type'                   => '',
						'post_status'                 => '',
						'taxonomy'                    => '',
						'filters'                     => array(
							0 => 'search',
						),
						'return_format'               => 'object',
						'post_author'                 => '',
						'add_edit_post'               => 0,
						'min'                         => '',
						'max'                         => '',
						'allow_in_bindings'           => 1,
						'elements'                    => '',
						'bidirectional'               => 0,
						'bidirectional_target'        => array(),
						'post_form_template'          => '',
					),
					array(
						'key'                  => 'field_682cbdb412a44',
						'label'                => 'Interviewers / Recorders',
						'name'                 => 'interviewers_recorders',
						'aria-label'           => '',
						'type'                 => 'relationship',
						'instructions'         => 'Link to all persons who conducted the interview or operated equipment.',
						'required'             => 0,
						'conditional_logic'    => 0,
						'wrapper'              => array(
							'width' => '50',
							'class' => '',
							'id'    => '',
						),
						'post_type'            => array(
							0 => 'person',
						),
						'taxonomy'             => array(),
						'filters'              => array(
							0 => 'search',
						),
						'return_format'        => 'object',
						'multiple'             => 1,
						'min'                  => '',
						'max'                  => '',
						'ui'                   => 1,
						'allow_null'           => 0,
						'elements'             => array(),
						'bidirectional_target' => array(),
					),
					array(
						'key'               => 'field_682cbe3e12a45',
						'label'             => 'Recording Equipment',
						'name'              => 'recording_equipment',
						'aria-label'        => '',
						'type'              => 'textarea',
						'instructions'      => 'List of equipment used (e.g., microphones, recorder model, etc.) and any important settings.',
						'required'          => 0,
						'conditional_logic' => 0,
						'wrapper'           => array(
							'width' => '',
							'class' => '',
							'id'    => '',
						),
						'default_value'     => '',
						'new_lines'         => '',
						'rows'              => 3,
						'placeholder'       => 'Recorder: Zoom H4n
Microphone: Shure SM58',
						'maxlength'         => '',
					),
					array(
						'key'               => 'field_682cbf3112a46',
						'label'             => 'Audio Files (Originals)',
						'name'              => 'audio_files_originals',
						'aria-label'        => '',
						'type'              => 'file',
						'instructions'      => 'Upload the original, unedited audio recordings from this session.',
						'required'          => 0,
						'conditional_logic' => 0,
						'wrapper'           => array(
							'width' => '50',
							'class' => '',
							'id'    => '',
						),
						'return_format'     => 'array',
						'library'           => 'all',
						'min_size'          => '',
						'max_size'          => '',
						'mime_types'        => 'wav, aiff, flac',
						'multiple'          => 1,
					),
					array(
						'key'               => 'field_682cc0b112a48',
						'label'             => 'Media Condition Notes',
						'name'              => 'media_condition_notes',
						'aria-label'        => '',
						'type'              => 'textarea',
						'instructions'      => 'Any relevant notes about the condition of the original media, background noise, or other technical issues.',
						'required'          => 0,
						'conditional_logic' => 0,
						'wrapper'           => array(
							'width' => '',
							'class' => '',
							'id'    => '',
						),
						'default_value'     => '',
						'new_lines'         => '',
						'rows'              => 3,
						'placeholder'       => 'e.g., Occasional background traffic noise. Hum from refrigerator in the first 10 minutes.',
						'maxlength'         => '',
					),
					array(
						'key'                         => 'field_68afe852920cd',
						'label'                       => 'Related Consent Agreement',
						'name'                        => 'related_consent_agreement',
						'aria-label'                  => '',
						'type'                        => 'post_object',
						'instructions'                => '',
						'required'                    => 0,
						'conditional_logic'           => 0,
						'wrapper'                     => array(
							'width' => '',
							'class' => '',
							'id'    => '',
						),
						'only_front'                  => 0,
						'frontend_admin_display_mode' => 'edit',
						'post_type'                   => array(
							0 => 'consent-agreement',
						),
						'post_status'                 => '',
						'taxonomy'                    => '',
						'return_format'               => 'id',
						'multiple'                    => 0,
						'post_author'                 => '',
						'add_edit_post'               => 0,
						'allow_null'                  => 0,
						'allow_in_bindings'           => 0,
						'bidirectional'               => 0,
						'ui'                          => 1,
						'bidirectional_target'        => array(),
						'post_form_template'          => '',
					),
					array(
						'key'               => 'field_682cc16312a49',
						'label'             => 'Usage Restrictions / Rights',
						'name'              => 'usage_restrictions_rights',
						'aria-label'        => '',
						'type'              => 'textarea',
						'instructions'      => 'Describe any global restrictions or rights limitations that apply to all content from this session, as detailed in the consent forms.',
						'required'          => 0,
						'conditional_logic' => 0,
						'wrapper'           => array(
							'width' => '50',
							'class' => '',
							'id'    => '',
						),
						'default_value'     => '',
						'new_lines'         => '',
						'rows'              => 4,
						'placeholder'       => 'e.g., Narrator has requested a 5-year embargo on public access, ending June 2030.',
						'maxlength'         => '',
					),
					array(
						'key'                         => 'field_682cc20a12a4a',
						'label'                       => 'Access Level',
						'name'                        => 'access_level',
						'aria-label'                  => '',
						'type'                        => 'select',
						'instructions'                => 'Set the overall access level for the materials from this session.',
						'required'                    => 0,
						'conditional_logic'           => 0,
						'wrapper'                     => array(
							'width' => '50',
							'class' => '',
							'id'    => '',
						),
						'only_front'                  => 0,
						'frontend_admin_display_mode' => 'edit',
						'choices'                     => array(
							'public'     => 'Public',
							'restricted' => 'Restricted',
							'embargoed'  => 'Embargoed',
							'private'    => 'Private',
						),
						'default_value'               => 'public',
						'return_format'               => 'value',
						'multiple'                    => 0,
						'allow_null'                  => 0,
						'allow_in_bindings'           => 1,
						'ui'                          => 0,
						'ajax'                        => 0,
						'placeholder'                 => '',
						'create_options'              => 0,
						'save_options'                => 0,
					),
				),
				'location'              => array(
					array(
						array(
							'param'    => 'post_type',
							'operator' => '==',
							'value'    => 'audio-recording',
						),
					),
				),
				'menu_order'            => 0,
				'position'              => 'normal',
				'style'                 => 'default',
				'label_placement'       => 'top',
				'instruction_placement' => 'label',
				'hide_on_screen'        => '',
				'active'                => true,
				'description'           => 'Technical and administrative metadata for an archival recording session.',
				'show_in_rest'          => 1,
				'no_values_message'     => '',
			)
		);
	}
);

add_action(
	'init',
	function () {
		register_taxonomy(
			'language',
			array(
				0 => 'audio-recording',
				1 => 'contributor',
			),
			array(
				'labels'            => array(
					'name'                       => 'Languages',
					'singular_name'              => 'Language',
					'menu_name'                  => 'Languages',
					'all_items'                  => 'All Languages',
					'edit_item'                  => 'Edit Language',
					'view_item'                  => 'View Language',
					'update_item'                => 'Update Language',
					'add_new_item'               => 'Add New Language',
					'new_item_name'              => 'New Language Name',
					'search_items'               => 'Search Languages',
					'popular_items'              => 'Popular Languages',
					'separate_items_with_commas' => 'Separate languages with commas',
					'add_or_remove_items'        => 'Add or remove languages',
					'choose_from_most_used'      => 'Choose from the most used languages',
					'not_found'                  => 'No languages found',
					'no_terms'                   => 'No languages',
					'items_list_navigation'      => 'Languages list navigation',
					'items_list'                 => 'Languages list',
					'back_to_items'              => '← Go to languages',
					'item_link'                  => 'Language Link',
					'item_link_description'      => 'A link to a language',
				),
				'description'       => 'The language spoken in an oral history.',
				'public'            => true,
				'show_in_menu'      => true,
				'show_in_rest'      => true,
				'show_admin_column' => true,
				'sort'              => true,
			)
		);

		register_taxonomy(
			'recording-type',
			array(
				0 => 'audio-recording',
			),
			array(
				'labels'            => array(
					'name'                  => 'Recording Types',
					'singular_name'         => 'Recording Type',
					'menu_name'             => 'Recording Types',
					'all_items'             => 'All Recording Types',
					'edit_item'             => 'Edit Recording Type',
					'view_item'             => 'View Recording Type',
					'update_item'           => 'Update Recording Type',
					'add_new_item'          => 'Add New Recording Type',
					'new_item_name'         => 'New Recording Type Name',
					'parent_item'           => 'Parent Recording Type',
					'parent_item_colon'     => 'Parent Recording Type:',
					'search_items'          => 'Search Recording Types',
					'not_found'             => 'No recording types found',
					'no_terms'              => 'No recording types',
					'filter_by_item'        => 'Filter by recording type',
					'items_list_navigation' => 'Recording Types list navigation',
					'items_list'            => 'Recording Types list',
					'back_to_items'         => '← Go to recording types',
					'item_link'             => 'Recording Type Link',
					'item_link_description' => 'A link to a recording type',
				),
				'description'       => 'Recording Types describe the nature and structure of the spoken material in a recorded submission.',
				'public'            => true,
				'hierarchical'      => true,
				'show_in_menu'      => true,
				'show_in_rest'      => true,
				'show_admin_column' => true,
				'rewrite'           => array(
					'hierarchical' => true,
				),
				'sort'              => true,
			)
		);
	}
);

add_action(
	'init',
	function () {
		register_post_type(
			'audio-recording',
			array(
				'labels'           => array(
					'name'                     => 'Audio Recordings',
					'singular_name'            => 'Audio Recording',
					'menu_name'                => 'Audio Recordings',
					'all_items'                => 'All Audio Recordings',
					'edit_item'                => 'Edit Audio Recording',
					'view_item'                => 'View Audio Recording',
					'view_items'               => 'View Audio Recordings',
					'add_new_item'             => 'Add Audio Recording',
					'add_new'                  => 'Add Audio Recording',
					'new_item'                 => 'New Audio Recording',
					'parent_item_colon'        => 'Parent Audio Recording:',
					'search_items'             => 'Search Audio Recordings',
					'not_found'                => 'No audio recordings found',
					'not_found_in_trash'       => 'No audio recordings found in Trash',
					'archives'                 => 'Audio Recording Archives',
					'attributes'               => 'Audio Recording Attributes',
					'insert_into_item'         => 'Insert into audio recording',
					'uploaded_to_this_item'    => 'Uploaded to this audio recording',
					'filter_items_list'        => 'Filter audio recordings list',
					'filter_by_date'           => 'Filter audio recordings by date',
					'items_list_navigation'    => 'Audio Recordings list navigation',
					'items_list'               => 'Audio Recordings list',
					'item_published'           => 'Audio Recording published.',
					'item_published_privately' => 'Audio Recording published privately.',
					'item_reverted_to_draft'   => 'Audio Recording reverted to draft.',
					'item_scheduled'           => 'Audio Recording scheduled.',
					'item_updated'             => 'Audio Recording updated.',
					'item_link'                => 'Audio Recording Link',
					'item_link_description'    => 'A link to a audio recording.',
				),
				'description'      => 'Represents a discrete field recording event with metadata like date, location, participants, and equipment used, linking multiple oral fragments and histories.',
				'public'           => true,
				'show_in_rest'     => true,
				'menu_position'    => 4,
				'menu_icon'        => 'dashicons-microphone',
				'capability_type'  => array(
					0 => 'audio recording',
					1 => 'audio recordings',
				),
				'map_meta_cap'     => true,
				'supports'         => array(
					0  => 'title',
					1  => 'author',
					2  => 'comments',
					3  => 'editor',
					4  => 'excerpt',
					5  => 'revisions',
					6  => 'page-attributes',
					7  => 'custom-fields',
					8  => 'post-formats',
					9  => 'Audio File',
					10 => 'Audio Length',
					11 => 'Annotations',
					12 => 'Latitude',
					13 => 'Longitude',
					14 => 'Agreed to Terms',
					15 => 'Author IP',
					16 => 'Author User-agent',
				),
				'taxonomies'       => array(
					0 => 'category',
					1 => 'post_tag',
					2 => 'language',
					3 => 'ambassador',
					4 => 'dialect',
					5 => 'recording-type',
				),
				'has_archive'      => 'audio-recordings',
				'delete_with_user' => false,
			)
		);

		register_post_type(
			'consent-agreement',
			array(
				'labels'              => array(
					'name'                     => 'Consent Agreements',
					'singular_name'            => 'Consent Agreement',
					'menu_name'                => 'Consent Agreements',
					'all_items'                => 'All Consent Agreements',
					'edit_item'                => 'Edit Consent Agreement',
					'view_item'                => 'View Consent Agreement',
					'view_items'               => 'View Consent Agreements',
					'add_new_item'             => 'Add Consent Agreement',
					'add_new'                  => 'Add Consent Agreement',
					'new_item'                 => 'New Consent Agreement',
					'parent_item_colon'        => 'Parent Consent Agreement:',
					'search_items'             => 'Search Consent Agreements',
					'not_found'                => 'No consent agreements found',
					'not_found_in_trash'       => 'No consent agreements found in Trash',
					'archives'                 => 'Consent Agreement Archives',
					'attributes'               => 'Consent Agreement Attributes',
					'insert_into_item'         => 'Insert into consent agreement',
					'uploaded_to_this_item'    => 'Uploaded to this consent agreement',
					'filter_items_list'        => 'Filter consent agreements list',
					'filter_by_date'           => 'Filter consent agreements by date',
					'items_list_navigation'    => 'Consent Agreements list navigation',
					'items_list'               => 'Consent Agreements list',
					'item_published'           => 'Consent Agreement published.',
					'item_published_privately' => 'Consent Agreement published privately.',
					'item_reverted_to_draft'   => 'Consent Agreement reverted to draft.',
					'item_scheduled'           => 'Consent Agreement scheduled.',
					'item_updated'             => 'Consent Agreement updated.',
					'item_link'                => 'Consent Agreement Link',
					'item_link_description'    => 'A link to a consent agreement.',
				),
				'description'         => 'User consent and agreement to terms.',
				'public'              => true,
				'exclude_from_search' => true,
				'publicly_queryable'  => false,
				'show_in_rest'        => true,
				'menu_position'       => 3,
				'menu_icon'           => 'dashicons-admin-customizer',
				'capability_type'     => array(
					0 => 'consent-agreement',
					1 => 'consent-agreements',
				),
				'map_meta_cap'        => true,
				'supports'            => array(
					0 => 'title',
					1 => 'author',
					2 => 'comments',
					3 => 'editor',
					4 => 'revisions',
					5 => 'thumbnail',
					6 => 'custom-fields',
				),
				'delete_with_user'    => false,
			)
		);
	}
);


add_filter(
	'enter_title_here',
	function ( $default, $post ) {
		switch ( $post->post_type ) {
			case 'audio-recording':
				return 'Add audio title';
			case 'consent-agreement':
				return 'Add signature';
		}

		return $default;
	},
	10,
	2
);
";s:43:" phpDocumentor\Reflection\Php\File docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:56:"Registers Custom Post Types, Taxonomies, and ACF fields.";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:3:{i:0;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Generic":2:{s:7:" * name";s:7:"package";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:16:"Starmus\includes";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}}i:1;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Version":3:{s:7:" * name";s:7:"version";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:55:" phpDocumentor\Reflection\DocBlock\Tags\Version version";s:5:"0.4.0";}i:2;O:44:"phpDocumentor\Reflection\DocBlock\Tags\Since":3:{s:7:" * name";s:5:"since";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:53:" phpDocumentor\Reflection\DocBlock\Tags\Since version";s:5:"0.2.0";}}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:0:"";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";N;s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:43:" phpDocumentor\Reflection\Php\File metadata";a:0:{}}";