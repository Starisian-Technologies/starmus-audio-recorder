# .github/workflows/release.yml

name: Release Code Quality Final Review

on:
  push:
    tags: ["v*"]

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository's code.
      - name: Checkout
        # v4.1.6 commit pin prevents release automation from using mutable checkout code.
        uses: actions/checkout@5a4ac9002afc2a3b8d9a0e327669c9fe749ac181
        with:
          fetch-depth: 0
          token: ${{ secrets.WORKFLOW_PAT }}

      # Step 2: Configure Git for commits.
      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      # Step 3: Get the version number from the tag.
      - name: Get the version from the tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      # Step 4: Update version numbers in all files.
      - name: Update version numbers
        run: |
          # Update package.json
          sed -i -E 's/("version":\s*").*(")/'\\1'${{ env.VERSION }}'\\2'/' package.json
          # Update plugin header version
          sed -i -E "s/^(\\s*\\* Version:\\s*).*/\\1${{ env.VERSION }}/" starmus-audio-recorder.php
          sed -i "s/define( 'STARMUS_VERSION', '[^']*' );/define( 'STARMUS_VERSION', '${{ env.VERSION }}' );/" starmus-audio-recorder.php
          # Update @version tags in PHP files
          find . -type f -name "*.php" -not -path "./vendor/*" -print0 | xargs -0 sed -i "s/@version\\s\\+[0-9.]\\+/@version ${{ env.VERSION }}/g"

      # Step 5: Commit version changes and update the tag.
      - name: Commit version bump and update tag
        run: |
          git add -A
          if ! git diff --staged --quiet; then
            git commit -m "chore(release): Bump version to ${{ env.VERSION }}"
            DEFAULT_BRANCH=${{ github.event.repository.default_branch }}
            git push origin HEAD:"refs/heads/$DEFAULT_BRANCH"
            git tag -f $GITHUB_REF_NAME
            git push origin $GITHUB_REF_NAME --force
          else
            echo "No version changes to commit."
          fi

      # Step 6: Verify plugin entrypoint exists.
      - name: Verify plugin entrypoint
        run: |
          test -f starmus-audio-recorder.php || { echo "Missing starmus-audio-recorder.php"; exit 1; }
          grep -q "Plugin Name:" starmus-audio-recorder.php || { echo "No plugin header found"; exit 1; }

      # Step 7: Set up PHP and install Composer dependencies.
      - name: Set up PHP
        uses: shivammathur/setup-php@ec406be512d7077f68eed36e63f4d91bc006edc4
        with:
          php-version: "8.2"
          tools: composer:v2
          coverage: none
      - name: Install PHP dependencies (no-dev)
        run: composer install --no-dev --prefer-dist --no-progress --no-interaction --optimize-autoloader

      # Step 8: Set up Node.js and build frontend assets.
      - name: Set up Node.js
        # v4.0.2 commit pin ensures deterministic Node installation.
        uses: actions/setup-node@8f1525dfb8c7b99f04f58f80ab1c2b74fdc6a059
        with:
          node-version: "18"
          cache: "npm"
      - name: Install JS dependencies
        run: npm ci

      - name: Build Assets
        run: npm run build
      - name: Verify build output
        run: |
          test -f assets/js/starmus-app.min.js || { echo "Missing bundled JS"; exit 1; }
          test -f assets/css/starmus-styles.min.css || { echo "Missing bundled CSS"; exit 1; }
          test -f vendor/js/peaks.min.js || { echo "Missing Peaks.js"; exit 1; }
          test -f vendor/js/tus.min.js || { echo "Missing tus.js"; exit 1; }

      # Step 9: Build the distributable plugin ZIP file.
      - name: Ensure .distignore exists
        run: test -f .distignore || { echo ".distignore is missing"; exit 1; }
      - name: Build plugin ZIP
        run: |
          SLUG="starmus-audio-recorder"
          VERSION=${{ env.VERSION }}
          rm -rf build
          mkdir -p build
          rsync -a --exclude-from=.distignore ./ build/${SLUG}/
          (cd build && zip -r "../${SLUG}-${VERSION}.zip" "${SLUG}")

      # Step 10: Generate checksums for the ZIP file.
      - name: Generate checksums
        run: |
          ZIP_FILE="starmus-audio-recorder-${{ env.VERSION }}.zip"
          sha256sum "$ZIP_FILE" > "$ZIP_FILE.sha256"
          sha1sum   "$ZIP_FILE" > "$ZIP_FILE.sha1"

      # Step 11: Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836
        with:
          files: |
            starmus-audio-recorder-${{ env.VERSION }}.zip
            starmus-audio-recorder-${{ env.VERSION }}.zip.sha256
            starmus-audio-recorder-${{ env.VERSION }}.zip.sha1
